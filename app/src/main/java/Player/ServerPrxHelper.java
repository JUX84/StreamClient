// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `Server.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package Player;

public final class ServerPrxHelper extends Ice.ObjectPrxHelperBase implements ServerPrx
{
    private static final String __addSong_name = "addSong";

    public void addSong(Song s)
    {
        addSong(s, null, false);
    }

    public void addSong(Song s, java.util.Map<String, String> __ctx)
    {
        addSong(s, __ctx, true);
    }

    private void addSong(Song s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "addSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.addSong(s, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_addSong(Song s)
    {
        return begin_addSong(s, null, false, null);
    }

    public Ice.AsyncResult begin_addSong(Song s, java.util.Map<String, String> __ctx)
    {
        return begin_addSong(s, __ctx, true, null);
    }

    public Ice.AsyncResult begin_addSong(Song s, Ice.Callback __cb)
    {
        return begin_addSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(Song s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_addSong(s, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_addSong(Song s, Callback_Server_addSong __cb)
    {
        return begin_addSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_addSong(Song s, java.util.Map<String, String> __ctx, Callback_Server_addSong __cb)
    {
        return begin_addSong(s, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_addSong(Song s, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __addSong_name, __cb);
        try
        {
            __result.__prepare(__addSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            s.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_addSong(Ice.AsyncResult __result)
    {
        __end(__result, __addSong_name);
    }

    private static final String __playSong_name = "playSong";

    public void playSong(String token)
    {
        playSong(token, null, false);
    }

    public void playSong(String token, java.util.Map<String, String> __ctx)
    {
        playSong(token, __ctx, true);
    }

    private void playSong(String token, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "playSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.playSong(token, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_playSong(String token)
    {
        return begin_playSong(token, null, false, null);
    }

    public Ice.AsyncResult begin_playSong(String token, java.util.Map<String, String> __ctx)
    {
        return begin_playSong(token, __ctx, true, null);
    }

    public Ice.AsyncResult begin_playSong(String token, Ice.Callback __cb)
    {
        return begin_playSong(token, null, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(String token, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_playSong(token, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_playSong(String token, Callback_Server_playSong __cb)
    {
        return begin_playSong(token, null, false, __cb);
    }

    public Ice.AsyncResult begin_playSong(String token, java.util.Map<String, String> __ctx, Callback_Server_playSong __cb)
    {
        return begin_playSong(token, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_playSong(String token, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __playSong_name, __cb);
        try
        {
            __result.__prepare(__playSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(token);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_playSong(Ice.AsyncResult __result)
    {
        __end(__result, __playSong_name);
    }

    private static final String __removeSong_name = "removeSong";

    public void removeSong(Song s)
    {
        removeSong(s, null, false);
    }

    public void removeSong(Song s, java.util.Map<String, String> __ctx)
    {
        removeSong(s, __ctx, true);
    }

    private void removeSong(Song s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "removeSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.removeSong(s, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_removeSong(Song s)
    {
        return begin_removeSong(s, null, false, null);
    }

    public Ice.AsyncResult begin_removeSong(Song s, java.util.Map<String, String> __ctx)
    {
        return begin_removeSong(s, __ctx, true, null);
    }

    public Ice.AsyncResult begin_removeSong(Song s, Ice.Callback __cb)
    {
        return begin_removeSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(Song s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_removeSong(s, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_removeSong(Song s, Callback_Server_removeSong __cb)
    {
        return begin_removeSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_removeSong(Song s, java.util.Map<String, String> __ctx, Callback_Server_removeSong __cb)
    {
        return begin_removeSong(s, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_removeSong(Song s, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __removeSong_name, __cb);
        try
        {
            __result.__prepare(__removeSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            s.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_removeSong(Ice.AsyncResult __result)
    {
        __end(__result, __removeSong_name);
    }

    private static final String __searchSong_name = "searchSong";

    public Song[] searchSong(String artist, String title)
    {
        return searchSong(artist, title, null, false);
    }

    public Song[] searchSong(String artist, String title, java.util.Map<String, String> __ctx)
    {
        return searchSong(artist, title, __ctx, true);
    }

    private Song[] searchSong(String artist, String title, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "searchSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("searchSong");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.searchSong(artist, title, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_searchSong(String artist, String title)
    {
        return begin_searchSong(artist, title, null, false, null);
    }

    public Ice.AsyncResult begin_searchSong(String artist, String title, java.util.Map<String, String> __ctx)
    {
        return begin_searchSong(artist, title, __ctx, true, null);
    }

    public Ice.AsyncResult begin_searchSong(String artist, String title, Ice.Callback __cb)
    {
        return begin_searchSong(artist, title, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchSong(String artist, String title, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_searchSong(artist, title, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_searchSong(String artist, String title, Callback_Server_searchSong __cb)
    {
        return begin_searchSong(artist, title, null, false, __cb);
    }

    public Ice.AsyncResult begin_searchSong(String artist, String title, java.util.Map<String, String> __ctx, Callback_Server_searchSong __cb)
    {
        return begin_searchSong(artist, title, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_searchSong(String artist, String title, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__searchSong_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __searchSong_name, __cb);
        try
        {
            __result.__prepare(__searchSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(artist);
            __os.writeString(title);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public Song[] end_searchSong(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __searchSong_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            Song[] __ret;
            __ret = SongSeqHelper.read(__is);
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __selectSong_name = "selectSong";

    public String selectSong(Song s)
    {
        return selectSong(s, null, false);
    }

    public String selectSong(Song s, java.util.Map<String, String> __ctx)
    {
        return selectSong(s, __ctx, true);
    }

    private String selectSong(Song s, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "selectSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __checkTwowayOnly("selectSong");
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    return __del.selectSong(s, __ctx, __observer);
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_selectSong(Song s)
    {
        return begin_selectSong(s, null, false, null);
    }

    public Ice.AsyncResult begin_selectSong(Song s, java.util.Map<String, String> __ctx)
    {
        return begin_selectSong(s, __ctx, true, null);
    }

    public Ice.AsyncResult begin_selectSong(Song s, Ice.Callback __cb)
    {
        return begin_selectSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectSong(Song s, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_selectSong(s, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_selectSong(Song s, Callback_Server_selectSong __cb)
    {
        return begin_selectSong(s, null, false, __cb);
    }

    public Ice.AsyncResult begin_selectSong(Song s, java.util.Map<String, String> __ctx, Callback_Server_selectSong __cb)
    {
        return begin_selectSong(s, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_selectSong(Song s, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__selectSong_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __selectSong_name, __cb);
        try
        {
            __result.__prepare(__selectSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            s.__write(__os);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public String end_selectSong(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __selectSong_name);
        boolean __ok = __result.__wait();
        try
        {
            if(!__ok)
            {
                try
                {
                    __result.__throwUserException();
                }
                catch(Ice.UserException __ex)
                {
                    throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
                }
            }
            IceInternal.BasicStream __is = __result.__startReadParams();
            String __ret;
            __ret = __is.readString();
            __result.__endReadParams();
            return __ret;
        }
        catch(Ice.LocalException ex)
        {
            Ice.Instrumentation.InvocationObserver __obsv = __result.__getObserver();
            if(__obsv != null)
            {
                __obsv.failed(ex.ice_name());
            }
            throw ex;
        }
    }

    private static final String __stopSong_name = "stopSong";

    public void stopSong(String token)
    {
        stopSong(token, null, false);
    }

    public void stopSong(String token, java.util.Map<String, String> __ctx)
    {
        stopSong(token, __ctx, true);
    }

    private void stopSong(String token, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "stopSong", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.stopSong(token, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_stopSong(String token)
    {
        return begin_stopSong(token, null, false, null);
    }

    public Ice.AsyncResult begin_stopSong(String token, java.util.Map<String, String> __ctx)
    {
        return begin_stopSong(token, __ctx, true, null);
    }

    public Ice.AsyncResult begin_stopSong(String token, Ice.Callback __cb)
    {
        return begin_stopSong(token, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopSong(String token, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stopSong(token, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_stopSong(String token, Callback_Server_stopSong __cb)
    {
        return begin_stopSong(token, null, false, __cb);
    }

    public Ice.AsyncResult begin_stopSong(String token, java.util.Map<String, String> __ctx, Callback_Server_stopSong __cb)
    {
        return begin_stopSong(token, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stopSong(String token, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stopSong_name, __cb);
        try
        {
            __result.__prepare(__stopSong_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(token);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_stopSong(Ice.AsyncResult __result)
    {
        __end(__result, __stopSong_name);
    }

    private static final String __uploadFile_name = "uploadFile";

    public void uploadFile(String path, byte[] data)
    {
        uploadFile(path, data, null, false);
    }

    public void uploadFile(String path, byte[] data, java.util.Map<String, String> __ctx)
    {
        uploadFile(path, data, __ctx, true);
    }

    private void uploadFile(String path, byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        final Ice.Instrumentation.InvocationObserver __observer = IceInternal.ObserverHelper.get(this, "uploadFile", __ctx);
        int __cnt = 0;
        try
        {
            while(true)
            {
                Ice._ObjectDel __delBase = null;
                try
                {
                    __delBase = __getDelegate(false);
                    _ServerDel __del = (_ServerDel)__delBase;
                    __del.uploadFile(path, data, __ctx, __observer);
                    return;
                }
                catch(IceInternal.LocalExceptionWrapper __ex)
                {
                    __handleExceptionWrapper(__delBase, __ex, __observer);
                }
                catch(Ice.LocalException __ex)
                {
                    __cnt = __handleException(__delBase, __ex, null, __cnt, __observer);
                }
            }
        }
        finally
        {
            if(__observer != null)
            {
                __observer.detach();
            }
        }
    }

    public Ice.AsyncResult begin_uploadFile(String path, byte[] data)
    {
        return begin_uploadFile(path, data, null, false, null);
    }

    public Ice.AsyncResult begin_uploadFile(String path, byte[] data, java.util.Map<String, String> __ctx)
    {
        return begin_uploadFile(path, data, __ctx, true, null);
    }

    public Ice.AsyncResult begin_uploadFile(String path, byte[] data, Ice.Callback __cb)
    {
        return begin_uploadFile(path, data, null, false, __cb);
    }

    public Ice.AsyncResult begin_uploadFile(String path, byte[] data, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_uploadFile(path, data, __ctx, true, __cb);
    }

    public Ice.AsyncResult begin_uploadFile(String path, byte[] data, Callback_Server_uploadFile __cb)
    {
        return begin_uploadFile(path, data, null, false, __cb);
    }

    public Ice.AsyncResult begin_uploadFile(String path, byte[] data, java.util.Map<String, String> __ctx, Callback_Server_uploadFile __cb)
    {
        return begin_uploadFile(path, data, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_uploadFile(String path, byte[] data, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __uploadFile_name, __cb);
        try
        {
            __result.__prepare(__uploadFile_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__startWriteParams(Ice.FormatType.DefaultFormat);
            __os.writeString(path);
            ByteSeqHelper.write(__os, data);
            __result.__endWriteParams();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    public void end_uploadFile(Ice.AsyncResult __result)
    {
        __end(__result, __uploadFile_name);
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServerPrx)
            {
                __d = (ServerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServerPrx)
            {
                __d = (ServerPrx)__obj;
            }
            else
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            if(__obj instanceof ServerPrx)
            {
                __d = (ServerPrx)__obj;
            }
            else
            {
                ServerPrxHelper __h = new ServerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServerPrx uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServerPrxHelper __h = new ServerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::Player::Server"
    };

    public static String ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM __createDelegateM()
    {
        return new _ServerDelM();
    }

    protected Ice._ObjectDelD __createDelegateD()
    {
        return new _ServerDelD();
    }

    public static void __write(IceInternal.BasicStream __os, ServerPrx v)
    {
        __os.writeProxy(v);
    }

    public static ServerPrx __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServerPrxHelper result = new ServerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }

    public static final long serialVersionUID = 0L;
}
