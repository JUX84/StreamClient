// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ServerPrx.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package speeral;

/**
 * \brief Speeral server
 **/
public interface ServerPrx extends Ice.ObjectPrx
{
    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     **/
    public void initialize(String configFile)
        throws SpeeralError;

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void initialize(String configFile, java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_initialize(String configFile);

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx);

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, Ice.Callback __cb);

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, Callback_Server_initialize __cb);

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx, Callback_Server_initialize __cb);

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __result The asynchronous result object.
     **/
    public void end_initialize(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief start the server (becomes Ready)
     **/
    public void start()
        throws SpeeralError;

    /**
     * \brief start the server (becomes Ready)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void start(java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief start the server (becomes Ready)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start();

    /**
     * \brief start the server (becomes Ready)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx);

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(Ice.Callback __cb);

    /**
     * \brief start the server (becomes Ready)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(Callback_Server_start __cb);

    /**
     * \brief start the server (becomes Ready)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Callback_Server_start __cb);

    /**
     * \brief start the server (becomes Ready)
     * @param __result The asynchronous result object.
     **/
    public void end_start(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief stop the server (becomes Stopped)
     **/
    public void stop()
        throws SpeeralError;

    /**
     * \brief stop the server (becomes Stopped)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void stop(java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief stop the server (becomes Stopped)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop();

    /**
     * \brief stop the server (becomes Stopped)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx);

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(Ice.Callback __cb);

    /**
     * \brief stop the server (becomes Stopped)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(Callback_Server_stop __cb);

    /**
     * \brief stop the server (becomes Stopped)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_Server_stop __cb);

    /**
     * \brief stop the server (becomes Stopped)
     * @param __result The asynchronous result object.
     **/
    public void end_stop(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief restart (start & stop)
     **/
    public void restart()
        throws SpeeralError;

    /**
     * \brief restart (start & stop)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void restart(java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief restart (start & stop)
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_restart();

    /**
     * \brief restart (start & stop)
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx);

    /**
     * \brief restart (start & stop)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_restart(Ice.Callback __cb);

    /**
     * \brief restart (start & stop)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief restart (start & stop)
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_restart(Callback_Server_restart __cb);

    /**
     * \brief restart (start & stop)
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx, Callback_Server_restart __cb);

    /**
     * \brief restart (start & stop)
     * @param __result The asynchronous result object.
     **/
    public void end_restart(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     **/
    public String decode(short[] signal, boolean lattice)
        throws SpeeralError;

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __ctx The Context map to send with the invocation.
     **/
    public String decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice);

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx);

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, Ice.Callback __cb);

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, Callback_Server_decode __cb);

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx, Callback_Server_decode __cb);

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __result The asynchronous result object.
     **/
    public String end_decode(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     **/
    public void setConfigOption(String option, String value)
        throws SpeeralError;

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __ctx The Context map to send with the invocation.
     **/
    public void setConfigOption(String option, String value, java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value);

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx);

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, Ice.Callback __cb);

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, Callback_Server_setConfigOption __cb);

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx, Callback_Server_setConfigOption __cb);

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __result The asynchronous result object.
     **/
    public void end_setConfigOption(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief obtain the current option-value
     * \return options
     **/
    public java.util.Map<java.lang.String, java.lang.String> getCurrentConfig()
        throws SpeeralError;

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __ctx The Context map to send with the invocation.
     **/
    public java.util.Map<java.lang.String, java.lang.String> getCurrentConfig(java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief obtain the current option-value
     * \return options
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCurrentConfig();

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(Ice.Callback __cb);

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(Callback_Server_getCurrentConfig __cb);

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx, Callback_Server_getCurrentConfig __cb);

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __result The asynchronous result object.
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getCurrentConfig(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief obtain all the available option
     * \return all the available options
     **/
    public String[] getAvailableOptions()
        throws SpeeralError;

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __ctx The Context map to send with the invocation.
     **/
    public String[] getAvailableOptions(java.util.Map<String, String> __ctx)
        throws SpeeralError;

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAvailableOptions();

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(Ice.Callback __cb);

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(Callback_Server_getAvailableOptions __cb);

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx, Callback_Server_getAvailableOptions __cb);

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __result The asynchronous result object.
     **/
    public String[] end_getAvailableOptions(Ice.AsyncResult __result)
        throws SpeeralError;

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     **/
    public String getResult();

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getResult(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getResult();

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getResult(Ice.Callback __cb);

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getResult(Callback_Server_getResult __cb);

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx, Callback_Server_getResult __cb);

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __result The asynchronous result object.
     **/
    public String end_getResult(Ice.AsyncResult __result);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     **/
    public String getLattice();

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __ctx The Context map to send with the invocation.
     **/
    public String getLattice(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLattice();

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLattice(Ice.Callback __cb);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLattice(Callback_Server_getLattice __cb);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx, Callback_Server_getLattice __cb);

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __result The asynchronous result object.
     **/
    public String end_getLattice(Ice.AsyncResult __result);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     **/
    public servStatus getStatus();

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __ctx The Context map to send with the invocation.
     **/
    public servStatus getStatus(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatus();

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __ctx The Context map to send with the invocation.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatus(Ice.Callback __cb);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatus(Callback_Server_getStatus __cb);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __ctx The Context map to send with the invocation.
     * @param __cb The asynchronous callback object.
     * @return The asynchronous result object.
     **/
    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, Callback_Server_getStatus __cb);

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __result The asynchronous result object.
     **/
    public servStatus end_getStatus(Ice.AsyncResult __result);
}
