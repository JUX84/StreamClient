// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `_ServerDisp.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package speeral;

/**
 * \brief Speeral server
 **/
public abstract class _ServerDisp extends Ice.ObjectImpl implements Server
{
    protected void
    ice_copyStateFrom(Ice.Object __obj)
        throws java.lang.CloneNotSupportedException
    {
        throw new java.lang.CloneNotSupportedException();
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::speeral::Server"
    };

    public boolean
    ice_isA(String s)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public boolean
    ice_isA(String s, Ice.Current __current)
    {
        return java.util.Arrays.binarySearch(__ids, s) >= 0;
    }

    public String[]
    ice_ids()
    {
        return __ids;
    }

    public String[]
    ice_ids(Ice.Current __current)
    {
        return __ids;
    }

    public String
    ice_id()
    {
        return __ids[1];
    }

    public String
    ice_id(Ice.Current __current)
    {
        return __ids[1];
    }

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     **/
    public final String
    decode(short[] signal, boolean lattice)
        throws SpeeralError
    {
        return decode(signal, lattice, null);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     **/
    public final String[]
    getAvailableOptions()
        throws SpeeralError
    {
        return getAvailableOptions(null);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     **/
    public final java.util.Map<java.lang.String, java.lang.String>
    getCurrentConfig()
        throws SpeeralError
    {
        return getCurrentConfig(null);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     **/
    public final String
    getLattice()
    {
        return getLattice(null);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     **/
    public final String
    getResult()
    {
        return getResult(null);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     **/
    public final servStatus
    getStatus()
    {
        return getStatus(null);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     **/
    public final void
    initialize(String configFile)
        throws SpeeralError
    {
        initialize(configFile, null);
    }

    /**
     * \brief restart (start & stop)
     **/
    public final void
    restart()
        throws SpeeralError
    {
        restart(null);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     **/
    public final void
    setConfigOption(String option, String value)
        throws SpeeralError
    {
        setConfigOption(option, value, null);
    }

    /**
     * \brief start the server (becomes Ready)
     **/
    public final void
    start()
        throws SpeeralError
    {
        start(null);
    }

    /**
     * \brief stop the server (becomes Stopped)
     **/
    public final void
    stop()
        throws SpeeralError
    {
        stop(null);
    }

    public static Ice.DispatchStatus
    ___initialize(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String configFile;
        configFile = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.initialize(configFile, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___start(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.start(__current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___stop(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.stop(__current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___restart(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.restart(__current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___decode(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        short[] signal;
        signal = sampleHelper.read(__is);
        boolean lattice;
        lattice = __is.readBool();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            String __ret = __obj.decode(signal, lattice, __current);
            __os.writeString(__ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___setConfigOption(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        IceInternal.BasicStream __is = __inS.is();
        __is.startReadEncaps();
        String option;
        option = __is.readString();
        String value;
        value = __is.readString();
        __is.endReadEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            __obj.setConfigOption(option, value, __current);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___getCurrentConfig(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            java.util.Map<java.lang.String, java.lang.String> __ret = __obj.getCurrentConfig(__current);
            optionsHelper.write(__os, __ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___getAvailableOptions(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        try
        {
            String[] __ret = __obj.getAvailableOptions(__current);
            availableOptionsHelper.write(__os, __ret);
            return Ice.DispatchStatus.DispatchOK;
        }
        catch(SpeeralError ex)
        {
            __os.writeUserException(ex);
            return Ice.DispatchStatus.DispatchUserException;
        }
    }

    public static Ice.DispatchStatus
    ___getResult(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        String __ret = __obj.getResult(__current);
        __os.writeString(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getLattice(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        String __ret = __obj.getLattice(__current);
        __os.writeString(__ret);
        return Ice.DispatchStatus.DispatchOK;
    }

    public static Ice.DispatchStatus
    ___getStatus(Server __obj, IceInternal.Incoming __inS, Ice.Current __current)
    {
        __checkMode(Ice.OperationMode.Normal, __current.mode);
        __inS.is().skipEmptyEncaps();
        IceInternal.BasicStream __os = __inS.os();
        servStatus __ret = __obj.getStatus(__current);
        __ret.__write(__os);
        return Ice.DispatchStatus.DispatchOK;
    }

    private final static String[] __all =
    {
        "decode",
        "getAvailableOptions",
        "getCurrentConfig",
        "getLattice",
        "getResult",
        "getStatus",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping",
        "initialize",
        "restart",
        "setConfigOption",
        "start",
        "stop"
    };

    public Ice.DispatchStatus
    __dispatch(IceInternal.Incoming in, Ice.Current __current)
    {
        int pos = java.util.Arrays.binarySearch(__all, __current.operation);
        if(pos < 0)
        {
            throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return ___decode(this, in, __current);
            }
            case 1:
            {
                return ___getAvailableOptions(this, in, __current);
            }
            case 2:
            {
                return ___getCurrentConfig(this, in, __current);
            }
            case 3:
            {
                return ___getLattice(this, in, __current);
            }
            case 4:
            {
                return ___getResult(this, in, __current);
            }
            case 5:
            {
                return ___getStatus(this, in, __current);
            }
            case 6:
            {
                return ___ice_id(this, in, __current);
            }
            case 7:
            {
                return ___ice_ids(this, in, __current);
            }
            case 8:
            {
                return ___ice_isA(this, in, __current);
            }
            case 9:
            {
                return ___ice_ping(this, in, __current);
            }
            case 10:
            {
                return ___initialize(this, in, __current);
            }
            case 11:
            {
                return ___restart(this, in, __current);
            }
            case 12:
            {
                return ___setConfigOption(this, in, __current);
            }
            case 13:
            {
                return ___start(this, in, __current);
            }
            case 14:
            {
                return ___stop(this, in, __current);
            }
        }

        assert(false);
        throw new Ice.OperationNotExistException(__current.id, __current.facet, __current.operation);
    }

    public void
    __write(IceInternal.BasicStream __os)
    {
        __os.writeTypeId(ice_staticId());
        __os.startWriteSlice();
        __os.endWriteSlice();
        super.__write(__os);
    }

    public void
    __read(IceInternal.BasicStream __is, boolean __rid)
    {
        if(__rid)
        {
            __is.readTypeId();
        }
        __is.startReadSlice();
        __is.endReadSlice();
        super.__read(__is, true);
    }

    public void
    __write(Ice.OutputStream __outS)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type speeral::Server was not generated with stream support";
        throw ex;
    }

    public void
    __read(Ice.InputStream __inS, boolean __rid)
    {
        Ice.MarshalException ex = new Ice.MarshalException();
        ex.reason = "type speeral::Server was not generated with stream support";
        throw ex;
    }
}
