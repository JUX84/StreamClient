// **********************************************************************
//
// Copyright (c) 2003-2013 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.5.1
//
// <auto-generated>
//
// Generated from file `speer_serv.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package speeral;

/**
 * \brief Speeral server
 **/
public interface _ServerOperationsNC
{
    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     **/
    void initialize(String configFile)
        throws SpeeralError;

    /**
     * \brief start the server (becomes Ready)
     **/
    void start()
        throws SpeeralError;

    /**
     * \brief stop the server (becomes Stopped)
     **/
    void stop()
        throws SpeeralError;

    /**
     * \brief restart (start & stop)
     **/
    void restart()
        throws SpeeralError;

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     **/
    String decode(short[] signal, boolean lattice)
        throws SpeeralError;

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     **/
    void setConfigOption(String option, String value)
        throws SpeeralError;

    /**
     * \brief obtain the current option-value
     * \return options
     **/
    java.util.Map<java.lang.String, java.lang.String> getCurrentConfig()
        throws SpeeralError;

    /**
     * \brief obtain all the available option
     * \return all the available options
     **/
    String[] getAvailableOptions()
        throws SpeeralError;

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     **/
    String getResult();

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     **/
    String getLattice();

    /**
     * \brief obtain the current server status
     * \return previous lattice
     **/
    servStatus getStatus();
}
