// **********************************************************************
//
// Copyright (c) 2003-2011 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.4.2
//
// <auto-generated>
//
// Generated from file `ServerPrxHelper.java'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package speeral;

/**
 * \brief Speeral server
 **/
public final class ServerPrxHelper extends Ice.ObjectPrxHelperBase implements ServerPrx
{
    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     **/
    public String
    decode(short[] signal, boolean lattice)
        throws SpeeralError
    {
        return decode(signal, lattice, null, false);
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __ctx The Context map to send with the invocation.
     **/
    public String
    decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        return decode(signal, lattice, __ctx, true);
    }

    private String
    decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("decode");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.decode(signal, lattice, __ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __decode_name = "decode";

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice)
    {
        return begin_decode(signal, lattice, null, false, null);
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx)
    {
        return begin_decode(signal, lattice, __ctx, true, null);
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, Ice.Callback __cb)
    {
        return begin_decode(signal, lattice, null, false, __cb);
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_decode(signal, lattice, __ctx, true, __cb);
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, Callback_Server_decode __cb)
    {
        return begin_decode(signal, lattice, null, false, __cb);
    }

    /**
     * \brief process a signal decoding 
     * NOTES: must be called when the server is Ready
     * \param signal the signal to process
     * \param lattice set to "true" the result is a lattice otherwise is a 1-best string
     * \return word lattice / 1-best
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx, Callback_Server_decode __cb)
    {
        return begin_decode(signal, lattice, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_decode(short[] signal, boolean lattice, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__decode_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __decode_name, __cb);
        try
        {
            __result.__prepare(__decode_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            sampleHelper.write(__os, signal);
            __os.writeBool(lattice);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_decode(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __decode_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     **/
    public String[]
    getAvailableOptions()
        throws SpeeralError
    {
        return getAvailableOptions(null, false);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __ctx The Context map to send with the invocation.
     **/
    public String[]
    getAvailableOptions(java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        return getAvailableOptions(__ctx, true);
    }

    private String[]
    getAvailableOptions(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getAvailableOptions");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.getAvailableOptions(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getAvailableOptions_name = "getAvailableOptions";

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAvailableOptions()
    {
        return begin_getAvailableOptions(null, false, null);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx)
    {
        return begin_getAvailableOptions(__ctx, true, null);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(Ice.Callback __cb)
    {
        return begin_getAvailableOptions(null, false, __cb);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getAvailableOptions(__ctx, true, __cb);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(Callback_Server_getAvailableOptions __cb)
    {
        return begin_getAvailableOptions(null, false, __cb);
    }

    /**
     * \brief obtain all the available option
     * \return all the available options
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx, Callback_Server_getAvailableOptions __cb)
    {
        return begin_getAvailableOptions(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getAvailableOptions(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getAvailableOptions_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getAvailableOptions_name, __cb);
        try
        {
            __result.__prepare(__getAvailableOptions_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String[] end_getAvailableOptions(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __getAvailableOptions_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String[] __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = availableOptionsHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * \brief obtain the current option-value
     * \return options
     **/
    public java.util.Map<java.lang.String, java.lang.String>
    getCurrentConfig()
        throws SpeeralError
    {
        return getCurrentConfig(null, false);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __ctx The Context map to send with the invocation.
     **/
    public java.util.Map<java.lang.String, java.lang.String>
    getCurrentConfig(java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        return getCurrentConfig(__ctx, true);
    }

    private java.util.Map<java.lang.String, java.lang.String>
    getCurrentConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getCurrentConfig");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.getCurrentConfig(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getCurrentConfig_name = "getCurrentConfig";

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCurrentConfig()
    {
        return begin_getCurrentConfig(null, false, null);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx)
    {
        return begin_getCurrentConfig(__ctx, true, null);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(Ice.Callback __cb)
    {
        return begin_getCurrentConfig(null, false, __cb);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getCurrentConfig(__ctx, true, __cb);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(Callback_Server_getCurrentConfig __cb)
    {
        return begin_getCurrentConfig(null, false, __cb);
    }

    /**
     * \brief obtain the current option-value
     * \return options
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx, Callback_Server_getCurrentConfig __cb)
    {
        return begin_getCurrentConfig(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getCurrentConfig(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getCurrentConfig_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getCurrentConfig_name, __cb);
        try
        {
            __result.__prepare(__getCurrentConfig_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public java.util.Map<java.lang.String, java.lang.String> end_getCurrentConfig(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __getCurrentConfig_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        java.util.Map<java.lang.String, java.lang.String> __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = optionsHelper.read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     **/
    public String
    getLattice()
    {
        return getLattice(null, false);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __ctx The Context map to send with the invocation.
     **/
    public String
    getLattice(java.util.Map<String, String> __ctx)
    {
        return getLattice(__ctx, true);
    }

    private String
    getLattice(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getLattice");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.getLattice(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getLattice_name = "getLattice";

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLattice()
    {
        return begin_getLattice(null, false, null);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx)
    {
        return begin_getLattice(__ctx, true, null);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLattice(Ice.Callback __cb)
    {
        return begin_getLattice(null, false, __cb);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getLattice(__ctx, true, __cb);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getLattice(Callback_Server_getLattice __cb)
    {
        return begin_getLattice(null, false, __cb);
    }

    /**
     * \brief obtain the last ASR lattice (if available)
     * NOTES: it works only if the lattice speeral option is setted to "yes"
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx, Callback_Server_getLattice __cb)
    {
        return begin_getLattice(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getLattice(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getLattice_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getLattice_name, __cb);
        try
        {
            __result.__prepare(__getLattice_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getLattice(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getLattice_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     **/
    public String
    getResult()
    {
        return getResult(null, false);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __ctx The Context map to send with the invocation.
     **/
    public String
    getResult(java.util.Map<String, String> __ctx)
    {
        return getResult(__ctx, true);
    }

    private String
    getResult(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getResult");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.getResult(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getResult_name = "getResult";

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getResult()
    {
        return begin_getResult(null, false, null);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx)
    {
        return begin_getResult(__ctx, true, null);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getResult(Ice.Callback __cb)
    {
        return begin_getResult(null, false, __cb);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getResult(__ctx, true, __cb);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getResult(Callback_Server_getResult __cb)
    {
        return begin_getResult(null, false, __cb);
    }

    /**
     * \brief obtain the last ASR result (if available) 
     * \return previous 1-best 
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx, Callback_Server_getResult __cb)
    {
        return begin_getResult(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getResult(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getResult_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getResult_name, __cb);
        try
        {
            __result.__prepare(__getResult_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public String end_getResult(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getResult_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        String __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = __is.readString();
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     **/
    public servStatus
    getStatus()
    {
        return getStatus(null, false);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __ctx The Context map to send with the invocation.
     **/
    public servStatus
    getStatus(java.util.Map<String, String> __ctx)
    {
        return getStatus(__ctx, true);
    }

    private servStatus
    getStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx)
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("getStatus");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                return __del.getStatus(__ctx);
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __getStatus_name = "getStatus";

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatus()
    {
        return begin_getStatus(null, false, null);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx)
    {
        return begin_getStatus(__ctx, true, null);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatus(Ice.Callback __cb)
    {
        return begin_getStatus(null, false, __cb);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_getStatus(__ctx, true, __cb);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_getStatus(Callback_Server_getStatus __cb)
    {
        return begin_getStatus(null, false, __cb);
    }

    /**
     * \brief obtain the current server status
     * \return previous lattice
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, Callback_Server_getStatus __cb)
    {
        return begin_getStatus(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_getStatus(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__getStatus_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __getStatus_name, __cb);
        try
        {
            __result.__prepare(__getStatus_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public servStatus end_getStatus(Ice.AsyncResult __result)
    {
        Ice.AsyncResult.__check(__result, this, __getStatus_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        servStatus __ret;
        IceInternal.BasicStream __is = __result.__is();
        __is.startReadEncaps();
        __ret = servStatus.__read(__is);
        __is.endReadEncaps();
        return __ret;
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     **/
    public void
    initialize(String configFile)
        throws SpeeralError
    {
        initialize(configFile, null, false);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    initialize(String configFile, java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        initialize(configFile, __ctx, true);
    }

    private void
    initialize(String configFile, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("initialize");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.initialize(configFile, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __initialize_name = "initialize";

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_initialize(String configFile)
    {
        return begin_initialize(configFile, null, false, null);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx)
    {
        return begin_initialize(configFile, __ctx, true, null);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, Ice.Callback __cb)
    {
        return begin_initialize(configFile, null, false, __cb);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_initialize(configFile, __ctx, true, __cb);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, Callback_Server_initialize __cb)
    {
        return begin_initialize(configFile, null, false, __cb);
    }

    /**
     * \brief initialize the speeral server (becomes Stopped)
     * \param configFile configuration file path (from the server location)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx, Callback_Server_initialize __cb)
    {
        return begin_initialize(configFile, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_initialize(String configFile, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__initialize_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __initialize_name, __cb);
        try
        {
            __result.__prepare(__initialize_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(configFile);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_initialize(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __initialize_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    /**
     * \brief restart (start & stop)
     **/
    public void
    restart()
        throws SpeeralError
    {
        restart(null, false);
    }

    /**
     * \brief restart (start & stop)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    restart(java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        restart(__ctx, true);
    }

    private void
    restart(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("restart");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.restart(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __restart_name = "restart";

    /**
     * \brief restart (start & stop)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_restart()
    {
        return begin_restart(null, false, null);
    }

    /**
     * \brief restart (start & stop)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx)
    {
        return begin_restart(__ctx, true, null);
    }

    /**
     * \brief restart (start & stop)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_restart(Ice.Callback __cb)
    {
        return begin_restart(null, false, __cb);
    }

    /**
     * \brief restart (start & stop)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_restart(__ctx, true, __cb);
    }

    /**
     * \brief restart (start & stop)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_restart(Callback_Server_restart __cb)
    {
        return begin_restart(null, false, __cb);
    }

    /**
     * \brief restart (start & stop)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx, Callback_Server_restart __cb)
    {
        return begin_restart(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_restart(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__restart_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __restart_name, __cb);
        try
        {
            __result.__prepare(__restart_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_restart(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __restart_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     **/
    public void
    setConfigOption(String option, String value)
        throws SpeeralError
    {
        setConfigOption(option, value, null, false);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    setConfigOption(String option, String value, java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        setConfigOption(option, value, __ctx, true);
    }

    private void
    setConfigOption(String option, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("setConfigOption");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.setConfigOption(option, value, __ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __setConfigOption_name = "setConfigOption";

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value)
    {
        return begin_setConfigOption(option, value, null, false, null);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx)
    {
        return begin_setConfigOption(option, value, __ctx, true, null);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, Ice.Callback __cb)
    {
        return begin_setConfigOption(option, value, null, false, __cb);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_setConfigOption(option, value, __ctx, true, __cb);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, Callback_Server_setConfigOption __cb)
    {
        return begin_setConfigOption(option, value, null, false, __cb);
    }

    /**
     * \brief change or set a specific speeral configuration option 
     * NOTES: As effect only if the server is Stopped
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx, Callback_Server_setConfigOption __cb)
    {
        return begin_setConfigOption(option, value, __ctx, true, __cb);
    }

    private Ice.AsyncResult begin_setConfigOption(String option, String value, java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__setConfigOption_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __setConfigOption_name, __cb);
        try
        {
            __result.__prepare(__setConfigOption_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.writeString(option);
            __os.writeString(value);
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_setConfigOption(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __setConfigOption_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    /**
     * \brief start the server (becomes Ready)
     **/
    public void
    start()
        throws SpeeralError
    {
        start(null, false);
    }

    /**
     * \brief start the server (becomes Ready)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    start(java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        start(__ctx, true);
    }

    private void
    start(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("start");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.start(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __start_name = "start";

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_start()
    {
        return begin_start(null, false, null);
    }

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx)
    {
        return begin_start(__ctx, true, null);
    }

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_start(Ice.Callback __cb)
    {
        return begin_start(null, false, __cb);
    }

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_start(__ctx, true, __cb);
    }

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_start(Callback_Server_start __cb)
    {
        return begin_start(null, false, __cb);
    }

    /**
     * \brief start the server (becomes Ready)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, Callback_Server_start __cb)
    {
        return begin_start(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_start(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__start_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __start_name, __cb);
        try
        {
            __result.__prepare(__start_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_start(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __start_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    /**
     * \brief stop the server (becomes Stopped)
     **/
    public void
    stop()
        throws SpeeralError
    {
        stop(null, false);
    }

    /**
     * \brief stop the server (becomes Stopped)
     * @param __ctx The Context map to send with the invocation.
     **/
    public void
    stop(java.util.Map<String, String> __ctx)
        throws SpeeralError
    {
        stop(__ctx, true);
    }

    private void
    stop(java.util.Map<String, String> __ctx, boolean __explicitCtx)
        throws SpeeralError
    {
        if(__explicitCtx && __ctx == null)
        {
            __ctx = _emptyContext;
        }
        int __cnt = 0;
        while(true)
        {
            Ice._ObjectDel __delBase = null;
            try
            {
                __checkTwowayOnly("stop");
                __delBase = __getDelegate(false);
                _ServerDel __del = (_ServerDel)__delBase;
                __del.stop(__ctx);
                return;
            }
            catch(IceInternal.LocalExceptionWrapper __ex)
            {
                __handleExceptionWrapper(__delBase, __ex);
            }
            catch(Ice.LocalException __ex)
            {
                __cnt = __handleException(__delBase, __ex, null, __cnt);
            }
        }
    }

    private static final String __stop_name = "stop";

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_stop()
    {
        return begin_stop(null, false, null);
    }

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx)
    {
        return begin_stop(__ctx, true, null);
    }

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_stop(Ice.Callback __cb)
    {
        return begin_stop(null, false, __cb);
    }

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Ice.Callback __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The callback object for the operation.
     **/
    public Ice.AsyncResult begin_stop(Callback_Server_stop __cb)
    {
        return begin_stop(null, false, __cb);
    }

    /**
     * \brief stop the server (becomes Stopped)
     * @param __cb The callback object for the operation.
     * @param __ctx The Context map to send with the invocation.
     **/
    public Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, Callback_Server_stop __cb)
    {
        return begin_stop(__ctx, true, __cb);
    }

    private Ice.AsyncResult begin_stop(java.util.Map<String, String> __ctx, boolean __explicitCtx, IceInternal.CallbackBase __cb)
    {
        __checkAsyncTwowayOnly(__stop_name);
        IceInternal.OutgoingAsync __result = new IceInternal.OutgoingAsync(this, __stop_name, __cb);
        try
        {
            __result.__prepare(__stop_name, Ice.OperationMode.Normal, __ctx, __explicitCtx);
            IceInternal.BasicStream __os = __result.__os();
            __os.endWriteEncaps();
            __result.__send(true);
        }
        catch(Ice.LocalException __ex)
        {
            __result.__exceptionAsync(__ex);
        }
        return __result;
    }

    /**
     * ice_response indicates that
     * the operation completed successfully.
     **/
    public void end_stop(Ice.AsyncResult __result)
        throws SpeeralError
    {
        Ice.AsyncResult.__check(__result, this, __stop_name);
        if(!__result.__wait())
        {
            try
            {
                __result.__throwUserException();
            }
            catch(SpeeralError __ex)
            {
                throw __ex;
            }
            catch(Ice.UserException __ex)
            {
                throw new Ice.UnknownUserException(__ex.ice_name(), __ex);
            }
        }
        IceInternal.BasicStream __is = __result.__is();
        __is.skipEmptyEncaps();
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                if(__obj.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__obj);
                    __d = __h;
                }
            }
        }
        return __d;
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId()))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx
    checkedCast(Ice.ObjectPrx __obj, String __facet, java.util.Map<String, String> __ctx)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            try
            {
                if(__bb.ice_isA(ice_staticId(), __ctx))
                {
                    ServerPrxHelper __h = new ServerPrxHelper();
                    __h.__copyFrom(__bb);
                    __d = __h;
                }
            }
            catch(Ice.FacetNotExistException ex)
            {
            }
        }
        return __d;
    }

    public static ServerPrx
    uncheckedCast(Ice.ObjectPrx __obj)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            try
            {
                __d = (ServerPrx)__obj;
            }
            catch(ClassCastException ex)
            {
                ServerPrxHelper __h = new ServerPrxHelper();
                __h.__copyFrom(__obj);
                __d = __h;
            }
        }
        return __d;
    }

    public static ServerPrx
    uncheckedCast(Ice.ObjectPrx __obj, String __facet)
    {
        ServerPrx __d = null;
        if(__obj != null)
        {
            Ice.ObjectPrx __bb = __obj.ice_facet(__facet);
            ServerPrxHelper __h = new ServerPrxHelper();
            __h.__copyFrom(__bb);
            __d = __h;
        }
        return __d;
    }

    public static final String[] __ids =
    {
        "::Ice::Object",
        "::speeral::Server"
    };

    public static String
    ice_staticId()
    {
        return __ids[1];
    }

    protected Ice._ObjectDelM
    __createDelegateM()
    {
        return new _ServerDelM();
    }

    protected Ice._ObjectDelD
    __createDelegateD()
    {
        return new _ServerDelD();
    }

    public static void
    __write(IceInternal.BasicStream __os, ServerPrx v)
    {
        __os.writeProxy(v);
    }

    public static ServerPrx
    __read(IceInternal.BasicStream __is)
    {
        Ice.ObjectPrx proxy = __is.readProxy();
        if(proxy != null)
        {
            ServerPrxHelper result = new ServerPrxHelper();
            result.__copyFrom(proxy);
            return result;
        }
        return null;
    }
}
